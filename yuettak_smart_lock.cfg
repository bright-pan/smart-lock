#use jlink for jtag
source [find interface/jlink.cfg]

# GDB can also flash my flash!
gdb_memory_map enable
gdb_flash_program enable

# Work-area size (RAM size) = 64kB for STM32F103VE device
set WORKAREASIZE 0x10000
source [find target/stm32f1x.cfg]


reset_config srst_only srst_nogate


proc newboot { } {
# Reset, leaving the CPU halted. The "reset-init" event
# proc gives faster access to the CPU and to NOR flash;
# "reset halt" would be slower.
reset init
# Write standard version of U-Boot into the first two
# sectors of NOR flash ... the standard version should
# do the same lowlevel init as "reset-init".
flash probe 0
stm32x unlock 0
stm32x mass_erase 0
flash write_bank 0 ./build/src/main.bin 0
# Reboot from scratch using that new boot loader.
reset halt
}


#proc newboot { } {
# Reset, leaving the CPU halted. The "reset-init" event
# proc gives faster access to the CPU and to NOR flash;
# "reset halt" would be slower.
#reset init
# Write standard version of U-Boot into the first two
# sectors of NOR flash ... the standard version should
# do the same lowlevel init as "reset-init".
#Chapter 5: OpenOCD Project Setup 17
#flash protect 0 0 1 off
#flash erase_sector 0 0 1
#flash write_bank 0 u-boot.bin 0x0
#flash protect 0 0 1 on
# Reboot from scratch using that new boot loader.
#reset run
#}

#proc ramboot { } {
# Reset, running the targetâ€™s "reset-init" scripts
# to initialize clocks and the DDR RAM controller.
# Leave the CPU halted.
#reset init
# Load CONFIG_SKIP_LOWLEVEL_INIT version into DDR RAM.
#load_image u-boot.bin 0x20000000
# Start running.
#resume 0x20000000
#}